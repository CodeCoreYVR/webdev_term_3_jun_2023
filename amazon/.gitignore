# *********************** Directories **********************
# Ignore the node_modules directory, which can contain a large number of files and can be easily regenerated by running `npm install` or `yarn install`.
/node_modules
# Ignore the public/packs directory, which contains compiled Webpack assets that can be regenerated by running `rails assets:precompile`.
/public/packs
# Ignore the public/packs-test directory, which contains test Webpack assets that can be regenerated by running `rails assets:test`.
/public/packs-test
# Ignore the public/system directory, which contains user-uploaded files that can be regenerated if necessary.
/public/system
# Ignore the tmp/cache directory, which contains cached files that can be regenerated if necessary.
/tmp/cache
# Ignore the tmp/pids directory, which contains temporary PID files that can be regenerated if necessary.
/tmp/pids
# Ignore the tmp/sockets directory, which contains UNIX sockets used for communication between processes.
/tmp/sockets
# Ignore cache directories created by tools like Sass, Yarn, and Webpack, which can be regenerated if necessary.  
cache/

# *************************  Files *************************
# Ignore the .DS_Store file, which is generated by macOS and stores folder-specific preferences such as icon position or view settings.
.DS_Store
# Ignore the .env files, which contain environment-specific configuration for tools like dotenv. They can contain sensitive information and should not be committed to the repository.
.env
.env.*
# Ignore the .ruby-version file, which specifies the Ruby version used in the app and is not necessary for the repository.
.ruby-version
# Ignore the email_vars.rb file, which contains environment-specific configuration for the Mailer. It can contain sensitive information and should not be committed to the repository.
email_vars.rb


# ***** Ignore all generated files except Gemfile.lock *****
# Ignore all log files generated by the Rails app, which can be quite large and can be regenerated easily.
*.log
# Ignore the log files generated by the Rails app, which can be quite large and can be regenerated easily.
/log/development.log
/log/test.log
/log/delayed_job.log
# Ignore the SQLite database file, which can also be quite large and can be regenerated from the schema file.
*.sqlite3
# Ignore the auto-generated database schema file, which can be safely removed since it can easily be regenerated from the database.
/db/schema.rb
# Ignore the directory where test coverage reports are stored, which can be quite large and can be regenerated easily.
/coverage/
# Ignore the directory where Bundler stores installed gems for the app, which can be quite large and can be regenerated easily.
/vendor/bundle/
# Ignore the directory where Bundler caches installed gems, which can be quite large and can be regenerated easily.
/vendor/cache/
# Ignore all files in the bin directory except for bin/bundle and bin/yarn, which are needed to install dependencies.
/bin/*
# Un-ignore the bin/rails file. This binstub launches the Rails CLI.
# It's necessary for running various Rails tasks (like generating models, running migrations, starting the server, etc.)
!/bin/rails
# Un-ignore the bin/rake file. This binstub launches the Rake task runner.
# It's necessary for running various Rake tasks (like database tasks, custom tasks defined in lib/tasks, etc.)
!/bin/rake
# Un-ignore the bin/bundle file, which is needed to install Ruby gems.
!/bin/bundle
# Ignore the bin/yarn file, which is needed to install JavaScript dependencies.
/bin/yarn
# Ignore the vendor/bundle directory, which is created by Bundler and can be regenerated easily.
/vendor/bundle/
# Ignore the .rvmrc file, which specifies the Ruby version used in the app and is not necessary for the repository.
.rvmrc
# Ignore the config directory, which can contain configuration files for tools like Yarn.
.config
# Ignore the .byebug_history file, which is generated by the byebug gem and can be safely removed since the history can easily be regenerated.
/.byebug_history
